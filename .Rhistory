school.nfreq
old<-options(digits = 3)
cbind(school.nfreq*100)
compi.nfreq<-compi.freq/nrow(painters)
cbind(compi.nfreq*100)
barplot(school.freq)
colors<-c("red","yellow", "green","violet","orange","blue","pink","cyan")
barplot(school.freq,col=colors)
barplot(compi.freq)
pie(school.nfreq)
pie(school.nfreq,col=colors)
c_school<-school=="C"
c_school
c_painter<-painters[c_school,]
c_painter
mean(c_painter$Composition)
old<-options(digits = 5)
mean(c_painter$Composition)
tapply(painters$Composition,painters$School,mean)
compi.school.max<-tapply(painters$Composition,painters$School,max)
compi.school.max
max(compi.school.max)
x<-which(compi.school.max==max(compi.school.max))
x
colour<-painters$Colour
x<-which(colour>=14)
x
painters[x]
painters[x,]
length(x)/nrow(painters)
head(faithful)
durations<-faithful$eruptions
table(durations)
range(durations)
breaks<-seq(1.5,5.5,by=0.5)
breaks
duration.cut<-cut(durations,breaks,right=FALSE)
duration.cut
durations.freq<-table(duration.cut)
durations.freq
cbind(durations.freq)
hist(durations)
x<-hist(durations)
x
waiting<-faithful$waiting
w<-hist(waiting)
w
cbind(w$breaks,w$counts)
cbind(w$breaks)
cbind(w$breaks[1],w$counts[1])
cbind(w$breaks[,],w$counts[,])
cbind(w$breaks,w$counts)
cbind([w$breaks,w$counts])
cbind((w$breaks,w$counts))
help(cbind)
cbind([w$breaks,w$density])
breaks<-seq(49,100 by=5)
breaks<-seq(49,100,by=5)
waiting.cut<-cut(waiting,breaks,right=FALSE)
waiting.freq
waiting.freq<-table(waiting.cut)
cbind(waiting.freq)
breaks<-seq(40,100,by=5)
waiting.cut<-cut(waiting,breaks,right=FALSE)
waiting.freq<-table(waiting.cut)
cbind(waiting.freq)
max(durations.freq)
xx<-which(durations.freq==max(durations.freq))
xx
durations[xx]
names(xx)
dura<-hist(faithful$eruptions)
dura
breaks<-seq(1.5,5.5,by=0.5)
dura.hist<-hist(faithful$eruptions,breaks = breaks,right=FALSE, plot=FALSE)
dura.hist$counts
duration<-faithful$eruptions
hist(durations,right=FALSE)
hist(durations,right=FALSE, col=colors)
colors<-colors = c(" red", "yellow", "green", "violet", "orange", "blue", "pink", "cyan")
colors<-colors = c(" red", "yellow", "green", "violet", "orange", "blue", "pink,"cyan")
colors<-colors = c("red","yellow","green","violet","orange","blue","pink,"cyan")
colors<-c("red","yellow","green","violet","orange","blue","pink,"cyan")
colors <- c("red","yellow","green","violet","orange","blue","pink,"cyan")
colors <- c("red","yellow","green","violet","orange","blue","pink","cyan")
hist(durations,right=FALSE, col=colors)
hist(durations,right=FALSE, col=colors,main="Old Faithful Eruptions",xlab="DUration in minutes")
hist(durations,right=FALSE, col=colors,main="Old Faithful Eruptions",xlab="Duration in minutes")
hist(faithful$waiting)
hist(faithful$waiting,right=FALSE)
breaks
durations.freq
durations.nfreq<-durations.freq/nrow(durations)
durations.nfreq<-durations.freq/nrow(faithful)
durations.nfreq
durations
nrow(durations)
length(durations)
length(faithful)
nrow(faithful)
faithful
duration<-faithful$eruptions
break<-seq(1.5,5.5,by=0.5)
breaks<-seq(1.5,5.5,by=0.5)
duration.cut<-cut(duration,breaks,right = FALSE)
duration.freq<-table(duration.cut)
duration.freq
cbind(duration.freq)
duration.nfreq<-duration.freq/nrow(faithful)
duration.perct<-duration.nfreq*100
old<-options(digits=3)
cbind(duration.freq,duration.perct)
waiting<-faithful$waiting
waiting.hist<-hist(waiting)
waiting.hist$breaks
breaks.waiting<-seq(40,100,by=5)
waiting<-cut(waiting, breaks.waiting,right=FALSE)
waiting.freq<-table(waiting)
cbind(waiting.freq)
waiting.nfreq<-waiting.freq/nrow(faithful)
waiting.perct<-waiting.nfreq*100
cbind(waiting.freq,waiting.nfreq)
cbind(waiting.freq,waiting.perct)
duration.cfreq<-cumsum(duration.freq)
duration.cfreq
cbind(duration.cfreq)
waiting.cfreq<-cumsum(waiting.freq)
cbind(waiting.cfreq)
plot(breaks,duration.cfreq)
duration.cfreq<-c(0,duration.cfreq)
plot(breaks,duration.cfreq)
plot(breaks,duration.cfreq,main="Old Faithful Eruptions",+ xlab="Duration Minutes"
plot(breaks,duration.cfreq,main="Old Faithful Eruptions",xlab="Duration Minutes",ylab="Cumulative Eruptions")
lines(breaks,duration.cfreq)
waiting.cfreq<-c(0,waiting.cfreq)
plot(breaks.waiting,waiting.cfreq,main="Old Faithful Eruptions",xlab="Waiting Minutes",ylab="Cumulative Eruptions")
lines(breaks,duration.cfreq)
lines(breaks.waiting,waiting.cfreq)
duration.cfreq
duration.ncfreq<-duration.cfreq/nrow(faithful)
plot(breaks, duration.ncfreq)
waiting.ncfreq<-waiting.cfreq/nrow(faithful)
cbind(waiting.cfreq,waiting.ncfreq)
cbind(waiting.cfreq,waiting.ncfreq8100)
cbind(waiting.cfreq,waiting.ncfreq*100)
Fn<-ecdf(duration)
plot(Fn)
FnW<-ecdf(waiting)
plot(FnW)
stem(duration)
duration
cbind(duration.nfreq)
cbind(duration.nfreq*100)
min(duration)
head(duration)
head(sort(duration))
stem(waiting)
waiting
stem(faithful$waiting)
waiting.hist$counts
waiting<-faithful$waiting
head(cbind(duration,waiting))
plot(duration,waiting)
abline(lm(waiting~duration))
faithful
duration<-faithful$eruptions
mean(duration)
waiting<-faithful$waiting
mean(waiting)
median(duration)
median(waiting)
quantile(duration)
quantile(waiting)
help(quantile)
max(duration)-min(duration)
max(waiting)-min(waiting)
IQR(duration)
duraQ<-quantile(duration)
duraQ[4]
duraQ[5]
duraQ[5]-duraQ[2]
duraQ[5]-duraQ[1]
duraQ<-quantile(duration,c(0.25,0.5,0.75,0.95))
duraQ
duraQ[4]-duraQ[1]
duraQ[4]-duraQ[0]
duraQ[3]-duraQ[1]
waitQ<-quantile(waiting)
waitQ
waitQ[4]-waitQ[1]
waitQ[4]-waitQ[2]
boxplot(duration,horizontal = TRUE)
boxplot(duration)
median(duration)
duraQ
min(duration)
quantile(duration)
var(duration)
var(waiting)
sd(duration)
sd(wait)
sd(waiting)
cov(duration,waiting)
plot(duration,waiting)
cor(waiting, duration)
library(e1071)
install.packages("e1071")
library(e1071)
moment(duration,order = 3, center=TRUE)
moment(duration,order = 2, center=TRUE)
moment(waiting,order = 3, center=TRUE)
library(e1017)
install.packages("e1017")
install.packages("e1017")
install.packages(c("data.table", "DBI", "devtools", "formatR", "gsubfn", "htmltools", "httr", "jsonlite", "KernSmooth", "labeling", "Lahman", "markdown", "mime", "Rcpp", "rmarkdown", "swirl", "testthat", "XLConnect", "XLConnectJars", "xlsxjars"))
library(e1071)
library(e1071)
duration<-faithful$eruptions
skewness(duration)
waiting<-faithful$waiting
skewness(waiting)
plot(waiting)
library(e1071)
duration<-faithful$eruptions
moment(duration,order = 3, center = TRUE)
moment(duration,order = 3, center = FALSE)
moment(duration,order = 3)
help(moment)
plot(duration)
mean(duration)
mean(duration)**3
(moment(duration,order = 3, center = TRUE))**(1/3)
(-0.6149059)^(1/3)
(-0.6149059)**(1/3)
(0.6149059)**(1/3)
length(duration>3.487783)
length(duration)
min(duration)
length(subset(duration>3.487783))
help(subset)
duration>3.487783
sum(duration>3.487783)
sum(duration<3.487783)
median(duration)
sum(duration<4)
sum(duration>4)
kurtosis(duration)
help(kurtosis)
pbinom(10,size = 12,prob = 0.2)
pbinom(2,size = 12,prob = 0.2)
ppois(16,lambda = 12)
ppois(16,lambda = 12,lower=FALSE)
runif(10,min = 1, max=3)
mean(duration)
pexp(2, 3.487783)
pexp(1, 3.487783)
pexp(0.5, 3.487783)
waiting<-faithful$waiting
mean(waiting)
pexp(60,70.89706)
pexp(2,1)
exp(-2)
pexp(2,1,lower.tail = TRUE)
pexp(2,1,lower.tail = FALSE)
pexp(60,70.89706,lower.tail = FALSE)
pexp(65,70.89706,lower.tail = FALSE)
pexp(65,70.89706,lower.tail = TRUE)
pexp(65,rate=70.89706)
pnorm(84,mean = 72,sd=15.2)
pnorm(84,mean = 72,sd=15.2,lower.tail = FALSE)
qchisq(0.95, df=7)
qt(c(0.025,0.975),df=5)
qf(0.95,df1=5,df2=2)
qf(0.95,df1=2,df2=5)
library(MASS)
head(survey)
help(survey)
height.survey=survey$Height
height.survey
mean(height.survey, na.rm = TRUE)
height.response=na.omit(survey$Height)
n=length(height.response)
n
var(height.response)
help(var)
min(height.response)
max(height.response)
stderr(height.response)
help(stderr)
help(stdin)
help(var)
sd(height.response)
qnorm(0.975)
qnorm(0.975)*sd(height.response)/sqrt(n)
sigma=sd(height.response)
sem<-sigma/sqrt(n)
sem<-sigma/sqrt(n); sem
9.48/sqrt(n)
sigma
E<-qnorm(0.975)*sd(height.response)/sqrt(n)
xbar<-mean(height.response)
xbar + c(-E,E)
xbar - c(-E,E)
E
library(TeachingDemos)
install.packages(TeachingDemos)
install.packages("TeachingDemos")
library(TeachingDemos)
z.test(height.response)
z.test(height.response, sd(height.response))
z.test(height.response, sd=sd(height.response))
##XLSX Math
getFile<-"./data/getdata_data_DATA.gov_NGAP.xlsx"
wb = loadWorkbook(getFile)
dat = readWorksheet(wb, sheet = "Sheet1", header = TRUE,startRow=18,startCol=7,endRow=23, endCol=15)
sum(dat$Zip*dat$Ext,na.rm=T)
##XLSX Math
getFile<-"./data/getdata_data_DATA.gov_NGAP.xlsx"
require(XLConnect)
wb = loadWorkbook(getFile)
dat = readWorksheet(wb, sheet = "Sheet1", header = TRUE,startRow=18,startCol=7,endRow=23, endCol=15)
sum(dat$Zip*dat$Ext,na.rm=T)
require(XLConnect)
install.packages("XLConnectJars")
##XLSX Math
getFile<-"./data/getdata_data_DATA.gov_NGAP.xlsx"
require(XLConnect)
wb = loadWorkbook(getFile)
dat = readWorksheet(wb, sheet = "Sheet1", header = TRUE,startRow=18,startCol=7,endRow=23, endCol=15)
sum(dat$Zip*dat$Ext,na.rm=T)
##XLSX Math
require(XLConnect)
getFile<-"./data/getdata_data_DATA.gov_NGAP.xlsx"
wb = loadWorkbook(getFile)
dat = readWorksheet(wb, sheet = "Sheet1", header = TRUE,startRow=18,startCol=7,endRow=23, endCol=15)
sum(dat$Zip*dat$Ext,na.rm=T)
library(rJava)
.jinit()
install.packages("rJava")
library(rJava)
.jinit()
library(rJava)
options(java.home=C:\Program Files\Java\jdk1.7.0_21\bin)
options(java.home="C:\Program Files\Java\jdk1.7.0_21\bin")
options(java.home="C:/Program Files/Java/jdk1.7.0_21")
library(rJava)
.jinit()
library(rJava)
options(java.home="C:/Program Files (x86)/Java/jre1.8.0_25")
library(rJava)
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library(rJava)
libr(dplyr)
library(dplyr)
library(tidyr)
install.packages("tidyr")
setwd("~/R/WorkingDir/CleaningData/Getting-and-Cleaning-Data---Coursera")
source('~/R/WorkingDir/CleaningData/Getting-and-Cleaning-Data---Coursera/run_analysis.R', echo=TRUE)
codebook(df)
install.packages("memisc", lib="C:/Users/ferguson/Documents/R/win-library/3.1")
codebook(df)
library(memisc)
codebook(df)
codebook((df))
summary(df)
prompt(df)
codebook(meanStd_Data)
install.packages("Hmisc")
library(Hmisc)
describe(meanStd_Data)
summary(AvgAll_TidyData)
head(AvgAll_TidyData,10)
head(AvgAll_TidyData,15)
head(meanStd_Data,15)
head(meanStd_Data[1:10],10)
source('~/R/WorkingDir/CleaningData/Getting-and-Cleaning-Data---Coursera/run_analysis.R', echo=TRUE)
head(meanStd_Data[1:5,])
head(meanStd_Data[1:5,5])
head(meanStd_Data[1:5,1:5])
head(meanStd_Data[1:5,1:8])
head(meanStd_Data[1:5,1:6])
head(meanStd_Data[1:5,10:16])
head(meanStd_Data[1:5,20:26])
head(meanStd_Data[1:5,c(meanStd_Data$tBodyAccmean()X)])
source('~/R/WorkingDir/CleaningData/Getting-and-Cleaning-Data---Coursera/run_analysis.R', echo=TRUE)
Features<-gsub("/()/","_",Features[,2])
Features<-gsub("()","_",Features)
Features<-read.table("UCI HAR Dataset/features.txt")
head(Features)
Features<-gsub("()-","",Features[,2])
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("/()/","_",Features)
head(Features)
Features<-read.table("UCI HAR Dataset/features.txt")
head(Features)
head(Features,10)
Features<-gsub(" -","_",Features[,2])
head(Features,10)
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("(","_",Features)
Features<-gsub("/(","_",Features)
Features<-gsub("(-","_",Features)
Features<-gsub('(-',"_",Features)
Features<-gsub("//()//","_",Features)
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("//(//","_",Features)
Features<-gsub("\\()\\","_",Features)
Features<-gsub("\\)-\\","_",Features)
Features<-gsub("\\)-","_",Features)
Features
Features<-read.table("UCI HAR Dataset/features.txt")
head(Features)
Features<-gsub("\\())-","_",Features)
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("\\()-","_",Features,fixed = TRUE)
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("n\\()-","_",Features,fixed = TRUE)
Features
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("-","_",Features,fixed = TRUE)
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("\\()-","_",Features[,2],fixed = TRUE)
head(Features)
Features<-read.table("UCI HAR Dataset/features.txt")
head(Features)
Features<-gsub("\\)-","_",Features[,2],fixed = TRUE)
head(Features)
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("n\\()-","_",Features[,2],fixed = TRUE)
head(Features)
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("n-","_",Features[,2],fixed = TRUE)
head(Features)
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("n","_",Features[,2],fixed = TRUE)
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("[()]","_",Features[,2],fixed = TRUE)
head(Features)
Features<-read.table("UCI HAR Dataset/features.txt")
"()" %in% Features[1,2]
Features[1,2]
"mean" %in% Features[1,2]
"X" %in% Features[1,2]
"*X*" %in% Features[1,2]
X %in% Features[1,2]
"X" %in% str(Features[1,2])
str(Features[1,2])
as.character(Features[1,2])
gsub("[()]","_",as.character(Features[1,2])
)
gsub("[(]","_",as.character(Features[1,2]))
gsub("\\()","_",as.character(Features[1,2]))
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("\\()-","",as.character(Features[,2]))
Features<-read.table("UCI HAR Dataset/features.txt")
Features<-gsub("\\()-","_",as.character(Features[,2]))
Features<-gsub("-","",Features)
source('~/R/WorkingDir/CleaningData/Getting-and-Cleaning-Data---Coursera/run_analysis.R', echo=TRUE)
meanStd_Data[1:5,1:6]
meanStd_Data[1:5,c(1:6)]
meanStd_Data[1:5,c(1:6,20:23)]
meanStd_Data[1:5,c(1:6,40:43)]
meanStd_Data[1:5,c(1:6,30:33)]
meanStd_Data[1:5,c(1:6,40:43)]
meanStd_Data[1:5,c(1:6,44:47)]
meanStd_Data[1:5,c(1:6,50:53)]
meanStd_Data[1:5,c(1:6,50:52)]
meanStd_Data[1:5,c(1:6,50:52)]
AvgTrain_Data[1:5,c(1:6,50:52)]
AvgAll_Data[1:5,c(1:6,50:52)]
AvgAll_TidyData[1:5,c(1:6,50:52)]
AvgAll_TidyData(order(Type,Subject, Activity))
AvgAll_TidyData[order(Type,Subject, Activity)]
head(AvgAll_TidyData)
AvgAll_TidyData[order(Group.1,Group.2, Group.3)]
aggregate(df[,4:ncol(df)], by=list(df$Type)
)
aggregate(df[,4:ncol(df)], by=list(df$Type),Fun=mean)
aggregate(df[,4:ncol(df)], by=list(df$Type),FUN = mean)
aggregate(df[,4:ncol(df)], by=list(df$Type=="test",df$Subject),FUN = mean)
chkr<-aggregate(df[,4:ncol(df)], by=list(df$Type=="test",df$Subject),FUN = mean)
chkr[1,]
chkr[,1]
chkr[,1:5]
chkr<-aggregate(df[,1:ncol(df)], by=list(df$Type=="test",df$Subject),FUN = mean)
chkr<-aggregate(df[,3:ncol(df)], by=list(df$Type=="test",df$Subject),FUN = mean)
chkr<-aggregate(df[,4:ncol(df)], by=list(df$Type=="test",df$Subject),FUN = mean)
chkr$Group.1
chkrb<-aggregate(df[,4:ncol(df)], by=list(df$Type=="test",df$Subject),FUN = mean)
chkra<-chkrb[chkrb$Group.1==TRUE]
chkra[1:2,:]
chkra[1:2,]
chkra[,1:2]
chkrb$Group.1
chkra<-chkrb[chkrb$Group.1==TRUE]
chkra<-chkrb[chkrb$Group.1]
ccc<-chkrb$Group.1
chkrb[ccc,]
source('~/R/WorkingDir/CleaningData/Getting-and-Cleaning-Data---Coursera/run_analysis.R', echo=TRUE)
AvgTest_Data[1:10,1:15]
AvgTest_Data[1:10,1:5]
AvgTest_Data[2:9,1:6]
AvgTest_Data[1:10,2:6]
AvgTest_Data[1:9,2:6]
AvgTest_Data[1:9,c(2:6,20:23)]
AvgTraint_Data[1:9,c(2:6,20:23)]
AvgTrain_Data[1:9,c(2:6,20:23)]
AvgTrain_Data[1:9,c(2:6,20:22)]
AvgTrain_Data[1:9,c(2:6,20:22)]
AvgTest_Data[1:9,c(2:6,20:22)]
